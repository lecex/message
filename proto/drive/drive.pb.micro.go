// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/drive/drive.proto

package drive

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Drives service

type DrivesService interface {
	// 全部驱动设置
	All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 获取驱动设置列表
	List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 根据 唯一 获取驱动设置
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 创建驱动设置
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 更新驱动设置
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 删除驱动设置
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type drivesService struct {
	c    client.Client
	name string
}

func NewDrivesService(name string, c client.Client) DrivesService {
	return &drivesService{
		c:    c,
		name: name,
	}
}

func (c *drivesService) All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Drives.All", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drivesService) List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Drives.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drivesService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Drives.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drivesService) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Drives.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drivesService) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Drives.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drivesService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Drives.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Drives service

type DrivesHandler interface {
	// 全部驱动设置
	All(context.Context, *Request, *Response) error
	// 获取驱动设置列表
	List(context.Context, *Request, *Response) error
	// 根据 唯一 获取驱动设置
	Get(context.Context, *Request, *Response) error
	// 创建驱动设置
	Create(context.Context, *Request, *Response) error
	// 更新驱动设置
	Update(context.Context, *Request, *Response) error
	// 删除驱动设置
	Delete(context.Context, *Request, *Response) error
}

func RegisterDrivesHandler(s server.Server, hdlr DrivesHandler, opts ...server.HandlerOption) error {
	type drives interface {
		All(ctx context.Context, in *Request, out *Response) error
		List(ctx context.Context, in *Request, out *Response) error
		Get(ctx context.Context, in *Request, out *Response) error
		Create(ctx context.Context, in *Request, out *Response) error
		Update(ctx context.Context, in *Request, out *Response) error
		Delete(ctx context.Context, in *Request, out *Response) error
	}
	type Drives struct {
		drives
	}
	h := &drivesHandler{hdlr}
	return s.Handle(s.NewHandler(&Drives{h}, opts...))
}

type drivesHandler struct {
	DrivesHandler
}

func (h *drivesHandler) All(ctx context.Context, in *Request, out *Response) error {
	return h.DrivesHandler.All(ctx, in, out)
}

func (h *drivesHandler) List(ctx context.Context, in *Request, out *Response) error {
	return h.DrivesHandler.List(ctx, in, out)
}

func (h *drivesHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.DrivesHandler.Get(ctx, in, out)
}

func (h *drivesHandler) Create(ctx context.Context, in *Request, out *Response) error {
	return h.DrivesHandler.Create(ctx, in, out)
}

func (h *drivesHandler) Update(ctx context.Context, in *Request, out *Response) error {
	return h.DrivesHandler.Update(ctx, in, out)
}

func (h *drivesHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.DrivesHandler.Delete(ctx, in, out)
}
